<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://javiergelatti.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.6.0">Jekyll</generator><link href="http://javiergelatti.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="http://javiergelatti.github.io/" rel="alternate" type="text/html" /><updated>2018-05-13T21:29:10-03:00</updated><id>http://javiergelatti.github.io/</id><title type="html">Blog</title><subtitle>Blog de Facundo Javier Gelatti</subtitle><entry><title type="html">Smalltalks 2017 - Entrevista con Brian Foote</title><link href="http://javiergelatti.github.io/smalltalks-2017-entrevista-con-brian-foote/" rel="alternate" type="text/html" title="Smalltalks 2017 - Entrevista con Brian Foote" /><published>2018-05-13T00:00:00-03:00</published><updated>2018-05-13T00:00:00-03:00</updated><id>http://javiergelatti.github.io/smalltalks-2017-entrevista-con-brian-foote</id><content type="html" xml:base="http://javiergelatti.github.io/smalltalks-2017-entrevista-con-brian-foote/">&lt;p&gt;Esta es la segunda entrevista que realicé durante las Smalltalks 2017, en la ciudad de La Plata. Esta vez entrevisto a &lt;a href=&quot;https://twitter.com/bigballofmud&quot;&gt;Brian Foote&lt;/a&gt;, sobre las charlas que dió en las Smalltalks y en el &lt;a href=&quot;https://sites.google.com/view/minislplop2017/&quot;&gt;Mini SugarLoaf PLoP 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Está disponible la transcripción de la entrevista, además de una traducción al español con algunos links. La entrevista también se puede &lt;a href=&quot;https://soundcloud.com/facundo-javier-gelatti/smalltalks-2017-interview-with-brian-foote&quot;&gt;escuchar desde Soundcloud&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipOWsOFjvYHzf7RG1yeZwnlUuSWaJojPGTF9s_Bt7vPa9gNZTDo3JW-8HmuZHPGfVg/photo/AF1QipP70OeMDVglbIAIRxT6fe_UYIZdqH0lVrRH2TFk?key=N0VoRE1YbUxZRmRRNXY3T1lSNktSV29mTmYxMTVR&quot;&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/brian_foote.jpg&quot; alt=&quot;Brian Foote (por Emilio Oca)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;audio controls=&quot;controls&quot; preload=&quot;auto&quot; src=&quot;/media/smalltalks2017_brian_foote.ogg&quot;&gt;
Parece que tu navegador no soporta el elemento audio :(&lt;br /&gt;
Podés probar &lt;a href=&quot;https://soundcloud.com/facundo-javier-gelatti/smalltalks-2017-interview-with-brian-foote&quot;&gt;escuchando desde Soundcloud&lt;/a&gt;.
&lt;/audio&gt;

&lt;nav id=&quot;selector&quot;&gt;
	&lt;input type=&quot;radio&quot; name=&quot;contenido&quot; value=&quot;transcript&quot; id=&quot;selectorTranscript&quot; checked=&quot;true&quot; /&gt;
	&lt;label for=&quot;selectorTranscript&quot;&gt;Transcripción textual&lt;/label&gt;

	&lt;input type=&quot;radio&quot; name=&quot;contenido&quot; value=&quot;traduccion&quot; id=&quot;selectorTraduccion&quot; /&gt;
	&lt;label for=&quot;selectorTraduccion&quot;&gt;Traducción con referencias&lt;/label&gt;
&lt;/nav&gt;

&lt;section id=&quot;transcript&quot;&gt;

  &lt;p&gt;We are here with Brian Foote&lt;/p&gt;

  &lt;p&gt;Hi there!&lt;/p&gt;

  &lt;p&gt;In the talk that you gave, you mentioned some patterns that exist today in the Software industry. Could you summarize some of them?&lt;/p&gt;

  &lt;p&gt;Joe Yoder and I wrote a pattern collection a few years ago called Big Ball of Mud, which had things like Throwaway Code and the Big Ball of Mud itself and the admonition to keep things working, make sure that you are having a heartbeat, and somewhere in the attic… you know, this recently accelerating process of pondering what else could be said about things like that has been rolling around my head, and there were a few patterns that we now see are becoming ubiquitous these days, given the way that people are really working that probably are worthy of writing down, because everybody knows ‘em, you know.
One of them is Bucket of Glue, and I’ve noticed years ago that instead of writing things from first principles, people were starting to integrate existing pieces more and just glue them together, sometimes not even in the same language, so… C could be a glue language that was calling out to a system to lash together existing pieces, that’s the example I used in the discussion, that’s what Mosaic did, was just lashing together existing parts, and it was widely successful, beyond anyone’s expectations at the time.
And along with that is Copy and Paste, everybody does it, everybody does it, I used to ask people when they were teaching design patterns whether they thought copy and paste was bad, and there’s been a change, you know, you asked that question fifteen years ago, all the hands would go up, everyone goes oh this is evil, you should be writing your own code, that’s stealing, that’s cheating if you do it in computer class.
Then you know, you could ask them “have you done it in the last week?”. Half the hands would go up, sheepishly the other half of the hands would go up, everybody does it, it’s what we do now cause’ there is so much out there. That’s the main thing it’s just cornucopia of stuff out there now. The change over the last… certainly this century, last 10 years in particular, you know, the whole Github phenomenon. These days, if you can think of it, you can probably find 20 people who’ve attempted to write it already, and you can pick and choose from among of those things and your job would be just to figure out whether you can integrate it. You know, like ball of mud, which was something that we knew existed all over the place, I think there was this claim that it was the predominant architecture in practice out there… no one has ever disputed that. We didn’t really have the data, but no one has really disputed it. Predominant, who knows, you know, it’s all like everything is awful, but a whole lot of stuff particularly in the industry just wasn’t that good.&lt;/p&gt;

  &lt;p&gt;Okay. How did Smalltalk influence the pattern movement?&lt;/p&gt;

  &lt;p&gt;Through, you know, Ralph Johnson and the research group that were in the university of Illinois… here is what happened, we all start using Smalltalk, and there were all this moves you would see that you know you may not have thought of before, and you’d make a mental note to yourself “man, that’s clever, I’m gonna do that the next time I have that problem”, and… Easily the majority of the patterns in the Gang of Four book can and were found and observed in the ParcPlace VisualWorks Cincom, you know, Parc tradition images, and were emulated in any of the subsequent releases that retained a descendance of the original codebase. To some extent they weren’t all aped in the derivative codebases, because, as I was saying in the talk today, one of the things that kind of slowed Smalltalk adoption down was intellectual property issues. It was frustrating. When the guys in Ottawa wanted to make their own Smalltalk they couldn’t steal the code that they would loved to have stolen, you know, and so they had to do their own, and they had to consciously make it not look like the Parc code. They had a totally different character. The stylistic differences were very striking between the two.&lt;/p&gt;

  &lt;p&gt;So, okay. For you, what are the disadvantages of using Singleton?&lt;/p&gt;

  &lt;p&gt;There really is a need to be able to have a one-to-one correspondence between an object that represents an external resource, and the external resource. If you’ve got a file descriptor, you don’t wanna have 2 copies of it. If you’ve got a printer pool, you’ve maybe wanna have 6 instances one for each of the printers, you’ll wanna have the right IP address or whatever resource locator you’re using for the printers, on and on, things like that, that’s one legitimate use. A second one is when you’ve got an object that is pure behaviour, why do you need more than one instance? You can easily just share the one existing instance, and you’ll be fine, and you have the additional benefit that, you already know it’s immutable, if it has no state, so… one of the things I used to say in pattern courses is… the State pattern, you know, ironically the state objects in the State pattern are often stateless, and when they are stateless they can be Singletons. But, in some ways people have gone overboard with the idea of “there’s only one instance of anything”, that was kind of silly.&lt;/p&gt;

  &lt;p&gt;So, if I think that there is an object and I need only one instance of that object, is it necessary…(to make it a Singleton)?&lt;/p&gt;

  &lt;p&gt;First get an object and then call the constructor once, and don’t call it again, it’s the simplest way to get one copy of an object that you only want one copy of it, you don’t need to make it a Singleton, you just don’t need to make more than one. If for some reason that turns out to be something that people are stupidly doing, put the check in, but… it seems ridiculous that people thought “oh my god we are getting only one instance of this, cause’ if so I have to make it a Singleton because the Gang of Four said so, and you know, they are smarter than we are”.&lt;/p&gt;

  &lt;p&gt;Okay, and… there are some people who don’t know the difference between method overloading and polymorphism, for example in Java.&lt;/p&gt;

  &lt;p&gt;It’s a very important difference. Java is polymorphic on the receiver of messages, the receiver of function calls, but on all the other arguments of the functions it’s statically bound. You can overload functions in Java, but the resolution is done statically, and so the version of the function that you get is determined by the type of the argument being passed that can be resolved by the compiler statically and what that means is if you wanna have something that will take an instance of the superclass of a base class that you’ve never seen, and then have the dispatch discriminate according to the runtime type of that argument, the type system is just gonna say you’re crazy, it’ll just go to if there’s an implementation, a static implementation in the superclass it’ll run that, and then if you wanted you could then do a type case, or if you’re clever you could then do a double dispatch and then get the dynamic polymorphism back but that’s the only way you wanna do it, and that’s basically the mechanism you see for the Visitor pattern in the Gang of Four book for C plus plusers, if they wanna get dynamic polymorphism they have to basically do double dispatch if you’re doing it in a single dispatch language, which was a technique that was described at the very first OOPSLA back in 1986 before just about anybody listening to this would’ve been born. So, if you want that effect for real, you can go to a programming language that does multimethods and they’re becoming more plentiful. I’ve just noticed this music program that I have on my laptop called Super Collider has multimethods in it, some of the R implementations have multimethods in them, lot of the Lisp-based languages have multimethods, Groovy has multimethods… if we googled it we could find ten more, so… and they’re interesting, you know, they’re not… applications are sufficiently rare that a lot of language designers decided to let their languages live without them, but when you need’em, they’re nice. There was a paper of the CLOS guys looked at code and saw how often people were using them and they were quite rare, like single digit percentages of all the generic functions in their libraries actually discriminated on more than one argument, and that’s what they call runtime dispatch in CLOS, but it did let them do some nice things. When I was designing meta-architectures, if you had dynamic dispatch and you’re trying to design a kernel of new objects that could allow you to replace anything, you could do some really clever stuff if they were dynamically dispatched, but when I was messing with those back in the 90s, you wanna have and build dynamic dispatch into a kind of a guiding assumption, and you could get some mileage out of it. There the idea was: I want to be able to replace anything and extend anything, and I want to be able to compile that in as efficient a manner of possible, and from that point on behave as though the substitution were in effect for everybody. If I wanna change the way variable assignment works for everybody, there’s an object that I should be able to go in and get that is the one that defines how that works for everybody and I should be able to drop that in and have it work that way for everyone, including the kernel and I should have a scheme for resolving the circularity, so that’ll mean part of the system is still playing by the old rules but everybody else who sees it from a different vantage point can see it do the new rules, and that’s all doable, there’s some neat reflection tricks that haven’t been sufficiently described and popularized that would let people do those kind of things and I think that’d be pretty cool. We’ve got a proliferation of fixed intent language extensions, and fixed languages that introduce one or two new features at a time and there always seems that it would be nicer if you had a language that would let you go build any of this stuff if you needed it and a core that would allow that, and if people did wanna use features like that they will pull them out of Github or whatever they came from and use them, if they wanted an extension and it did the job they wanted then they could, and that still seems feasible, I’m curious whether anyone has done it, I’m a little behind on the research.&lt;/p&gt;

  &lt;p&gt;Okay, thank you!&lt;/p&gt;

  &lt;p&gt;You’re welcome!&lt;/p&gt;

&lt;/section&gt;
&lt;section id=&quot;traduccion&quot; class=&quot;oculto&quot;&gt;

  &lt;p&gt;Estamos aquí con &lt;a href=&quot;http://www.laputan.org/&quot;&gt;Brian Foote&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;¡Hola!&lt;/p&gt;

  &lt;p&gt;En la charla que diste, mencionaste algunos patrones que existen hoy en la industria del software. ¿Podrías mencionar algunos de ellos? (La charla se titula “Software in the Age of Sampling”, hay disponible un &lt;a href=&quot;https://vimeo.com/53153271&quot;&gt;video de otra instancia de la charla, dada en otra conferencia&lt;/a&gt;)&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://twitter.com/metayoda&quot;&gt;Joe Yoder&lt;/a&gt; y yo escribimos una colección de patrones hace unos años llamada &lt;a href=&quot;http://www.laputan.org/mud/&quot;&gt;“Big Ball of Mud”&lt;/a&gt;, que incluía patrones como &lt;a href=&quot;http://www.laputan.org/mud/mud.html#ThrowAwayCode&quot;&gt;“Throwaway Code”&lt;/a&gt; (código desechable), la propia &lt;a href=&quot;http://www.laputan.org/mud/mud.html#BigBallOfMud&quot;&gt;“Big Ball of Mud”&lt;/a&gt; (gran bola de barro) en sí, y la advertencia de &lt;a href=&quot;http://www.laputan.org/mud/mud.html#KeepItWorking&quot;&gt;“Keep It Working”&lt;/a&gt; (mantener las cosas funcionando), asegurate de tener una palpitación constante. Y en algún lugar del ático… este proceso acelerado de pensar qué más se podría decir acerca de cosas como esas estaba rondando por mi cabeza, y había algunos patrones que se están volviendo omnipresentes el día de hoy, considerando la manera en la que las personas están trabajando realmente, y que probablemente son dignos de escribir, porque todos los conocen.
Uno de ellos es &lt;a href=&quot;http://www.laputan.org/catfish/archives/000103.html&quot;&gt;“Bucket of Glue”&lt;/a&gt; (balde de plasticola). Me dí cuenta hace unos años que, en lugar de escribir cosas a partir de principios básicos, la gente había empezado a integrar piezas existentes, simplemente “pegandolas” entre sí.
Y junto con eso está &lt;a href=&quot;http://www.laputan.org/catfish/archives/000104.html&quot;&gt;“Copy and Paste”&lt;/a&gt; (copiar y pegar), todo el mundo lo hace. Le solía preguntar a la gente cuando estaba enseñando patrones de diseño si es que pensaban que hacer copy-paste estaba mal, y en eso hubo un cambio. Si hacías esa pregunta hace 15 años, se levantaban todas las manos, todos decían “eso es malo”, “deberías escribir tu propio código”, “eso es robar”, “eso es hacer trampa si lo hacés en clase”.
Después, bueno, podías preguntarles “¿Lo hicieron en esta última semana?”. La mitad de las manos se levantaban, y tímidamente la otra mitad también. Todo el mundo lo hace, es lo que hacemos ahora, porque hay muchísimas cosas disponibles. Esa es la cuestión principal, ahora hay un cuerno de la abundancia de cosas disponibles por ahí.
Hubo un cambio en los últimos 10 años en particular, todo el fenómeno de Github. Estos días, si podés pensar en algo, seguramente podés encontrar a 20 personas que ya intentaron escribirlo, y podés seleccionar y elegir entre esas cosas, y tu trabajo sería solamente ver si podés integrarlas. Como “Ball of Mud”, que fué algo que sabíamos que existía en todos lados, por ejemplo había gente que decía que era la arquitectura en práctica predominante… y nadie ha cuestionado eso alguna vez. Nosotros no teníamos los datos estadísticos, pero nadie lo negó.&lt;/p&gt;

  &lt;p&gt;¿Cuál fué la influencia de Smalltalk en el movimiento de patrones de diseño? [&lt;a href=&quot;https://youtu.be/GOnzhZ4Sh38?list=PLCGAAdUizzH0PRIZxSeGmDyjz5_AgSgZ-&quot;&gt;charla: “A Smalltalk Patterns Safari”&lt;/a&gt;]&lt;/p&gt;

  &lt;p&gt;A través de &lt;a href=&quot;https://en.wikipedia.org/wiki/Ralph_Johnson_(computer_scientist)&quot;&gt;Ralph Johnson&lt;/a&gt; y el grupo de investigación que estaba en la universidad de Illinois… esto es lo que pasó: empezamos a usar Smalltalk, y había toda una serie de movimientos que veías, y eran cosas que quizás nunca se te habían ocurrido antes. Entonces hacías una nota mental diciendo “está re bueno eso, lo voy a hacer la próxima vez que tenga que solucionar ese problema”. Fácilmente la mayoría de los &lt;a href=&quot;https://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;Patrones GoF&lt;/a&gt; pueden ser y fueron encontrados y observados en las imágenes de Smalltalk tradicionales de Parc, y fueron emulados después en todos los dialectos subsecuentes que conservaron una descendencia de la base de código original.
Sin embargo, en cierto sentido no todos fueron imitados en las bases de código derivadas, porque, &lt;a href=&quot;https://www.youtube.com/watch?v=xOweQn70FQg&amp;amp;feature=youtu.be&amp;amp;list=PLCGAAdUizzH0PRIZxSeGmDyjz5_AgSgZ-&amp;amp;t=3605&quot;&gt;como dije en la charla de hoy&lt;/a&gt;, una de las cosas que ralentizó la adopción de Smalltalk fueron problemas de propiedad intelectual.&lt;/p&gt;

  &lt;p&gt;Para vos, ¿Cuáles son las desventajas de utilizar el &lt;a href=&quot;https://es.wikipedia.org/wiki/Singleton&quot;&gt;patrón Singleton?&lt;/a&gt; [comentario: la respuesta es más a la pregunta ¿Cuáles son los casos en los que se puede usar el patrón Singleton?]&lt;/p&gt;

  &lt;p&gt;Hay una necesidad real de tener una correspondencia uno-a-uno entre un objeto que representa un recurso externo, y el recurso externo en sí. Si tenés un descriptor de archivo, no querés tener dos copias. Si tenés un pool de impresoras, quizás querés tener por ejemplo 6 instancias, una para cada impresora, y querrías tener la dirección IP correcta para cada una, cosas como esas son usos legítimos del patrón.
Un segundo caso es cuando tenés un objeto que solamente representa comportamiento, ¿Por qué querrías tener más de una instancia? Fácilmente podés compartir la única instancia existente, y vas a andar bien. Aparte, ya sabés que ese objeto &lt;a href=&quot;https://es.wikipedia.org/wiki/Objeto_inmutable&quot;&gt;es inmutable&lt;/a&gt;, porque no tiene estado.
Una de las cosas que solía decir en los cursos de patrones sobre el &lt;a href=&quot;https://es.wikipedia.org/wiki/State_(patr%C3%B3n_de_dise%C3%B1o)&quot;&gt;patrón Estado&lt;/a&gt; es que irónicamente los objetos “estado” del patrón suelen no tener estado (ser “stateless”), y cuando no tienen estado entonces pueden ser Singletons.
Pero bueno, en algún sentido la gente se enloqueció con la idea de que “solamente hay una instancia de todo”, y eso sí fue algo malo.&lt;/p&gt;

  &lt;p&gt;Entonces, si me parece que hay un objeto y necesito sólo una instancia de ese objeto, ¿Es necesario (que sea un Singleton)?&lt;/p&gt;

  &lt;p&gt;Primero identificá el objeto, y después invocá al constructor una sola vez, y no lo invoques de nuevo. Es la manera más simple de obtener una sola copia de un objeto del que querés sólo una copia. No tiene por qué ser un Singleton, simplemente no tenés que crear más de uno.
Si por alguna razón eso parece ser algo que la gente está haciendo (crear más de una copia), incluí la verificación, pero… parece ridículo que la gente haya pensado “Dios mío, ¿Tenemos una sola instancia de esto? Porque si es así tenemos que hacer que sea un Singleton porque los patrones GoF dicen eso!”&lt;/p&gt;

  &lt;p&gt;Hay algunas personas que no saben cuál es la &lt;a href=&quot;https://es.wikipedia.org/wiki/Polimorfismo_(inform%C3%A1tica)#Diferencias_entre_polimorfismo_y_sobrecarga&quot;&gt;diferencia&lt;/a&gt; entre la &lt;a href=&quot;https://es.wikipedia.org/wiki/Sobrecarga_(inform%C3%A1tica)&quot;&gt;sobrecarga de métodos&lt;/a&gt; y el &lt;a href=&quot;https://es.wikipedia.org/wiki/Polimorfismo_(inform%C3%A1tica)&quot;&gt;polimorfismo&lt;/a&gt;, por ejemplo en Java [&lt;a href=&quot;https://youtu.be/xOweQn70FQg?list=PLCGAAdUizzH0PRIZxSeGmDyjz5_AgSgZ-&quot;&gt;charla: “Reflection: Smalltalk’s Most Enduring Idea?”&lt;/a&gt;]&lt;/p&gt;

  &lt;p&gt;Es una diferencia muy importante. Java es polimórfico en el receptor de los mensajes, o sea, en el receptor de las llamadas a funciones, pero en todos los demás argumentos está enlazado estáticamente. Podés sobrecargar métodos en Java, pero la resolución se realiza de manera estática, por lo que la versión del método que obtenés está determinada por el tipo de los argumentos que le pasaste que puedan ser resueltos por el compilador de manera estática. Eso significa que si querés tener un método que reciba una instancia de una subclase que nunca has visto, y querés que la selección del método se realice de acuerdo al tipo del argumento en tiempo de ejecución, el sistema de tipos te va a decir que estás loco, y simplemente va a seleccionar la implementación que corresponde a la superclase y va a ejecutar eso. Y bueno, después si querés ahí podés hacer un switch con el tipo, o si sos ingenioso podés hacer un &lt;a href=&quot;https://en.wikipedia.org/wiki/Double_dispatch&quot;&gt;double dispatch&lt;/a&gt; y entonces tener polimorfismo dinámico de nuevo, pero esa es la única manera en la que podés hacerlo.
Y ese es básicamente el mecanismo que se ve en el &lt;a href=&quot;https://es.wikipedia.org/wiki/Visitor_(patr%C3%B3n_de_dise%C3%B1o)&quot;&gt;patrón GoF&lt;/a&gt; Visitor para C++. Si ahí querés tener polimorfismo dinámico, tenés que hacer un double dispatch (porque estás usando un lenguaje que tiene single dispatch), que es una técnica que &lt;a href=&quot;https://klevas.mif.vu.lt/~plukas/resources/MultiDispatch/ingalls.pdf&quot;&gt;fue descrita en el primer OOPSLA en 1986&lt;/a&gt;, antes de que casi cualquiera que esté leyendo esto haya nacido. Y bueno, si querés ese efecto de verdad, podés usar un lenguaje de programación que tenga &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_dispatch&quot;&gt;multimétodos&lt;/a&gt;, y se están volviendo abundantes. Hace poco me dí cuenta que este programa de música que tengo en mi laptop llamado &lt;a href=&quot;https://supercollider.github.io/&quot;&gt;“Super Collider”&lt;/a&gt; tiene multimétodos, algunas implementaciones de &lt;a href=&quot;https://www.r-project.org/about.html&quot;&gt;R&lt;/a&gt; tienen multimétodos, muchos lenguajes basados en &lt;a href=&quot;https://en.wikipedia.org/wiki/Lisp_(programming_language)&quot;&gt;Lisp&lt;/a&gt; tienen multimétodos, &lt;a href=&quot;http://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt; tiene multimétodos… si lo googleáramos &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiple_dispatch#Support_in_programming_languages&quot;&gt;podríamos encontrar 10 más&lt;/a&gt;… y son interesantes. Las aplicaciones son lo suficientemente raras para que muchos diseñadores de lenguajes decidieran no incluir multimétodos en su lenguaje, pero cuando los necesitás, están buenos. Había un paper de la gente de &lt;a href=&quot;https://en.wikipedia.org/wiki/Common_Lisp_Object_System&quot;&gt;CLOS&lt;/a&gt;, donde miraron el código y analizaron cuál era la frecuencia con la cual se utilizaban multimétodos, y era bastante raro, digamos un porcentaje de un sólo dígito de todas las funciones genéricas de sus librerías realmente discriminaban en más de un argumento, y eso es lo que ellos llaman dispatch en tiempo de ejecución en CLOS, pero les dejó hacer algunas cosas buenas.
Cuando estaba diseñando meta-arquitecturas, si tenías dispatch dinámico y estabas tratando de diseñar un kernel de nuevos objetos que te permitían reemplazar lo que sea, podías hacer cosas realmente ingeniosas si eran despachados dinámicamente. Cuando estaba jugando con eso allá en los 90, querías tener el dynamic dispatch como una suerte de premisa guía, y sacarle provecho. Ahí la idea era: Quiero ser capaz de reemplazar lo que sea y extender lo que sea, y quiero ser capaz de compilar eso de la manera más eficiente posible, y  a partir de ese punto en adelante comportarme como si la sustitución hubiera sido en efecto para todos.
Si quisiera cambiar la manera en la que se comporta la asignación de variables para todos, hay un objeto que debería ser capaz de encontrar, que es el que define cómo funciona eso, y debería ser capaz de modificarlo y hacer que funcione para todos de la manera que yo quiero, incluyendo el kernel, y debería tener un esquema para resolver la circularidad. Eso significaría entonces que una parte del sistema todavía estaría jugando según las reglas viejas, pero todos los que lo vean desde un punto de vista diferente lo ven siguiendo las reglas nuevas. Y todo eso es realizable, hay unos trucos elegantes de reflexión que no fueron lo suficientemente descritos y popularizados, que le permitirían a la gente hacer este tipo de cosas, y creo que eso es muy genial.
Tenemos una proliferación de extensiones de lenguajes de intención fija, y lenguajes fijos que introducen una o dos nuevas características a la vez, y siempre parece ser que sería mejor si tuviéramos un lenguaje que te permitiera construir cualquiera de estas cosas si lo necesitaras. Entonces si la gente quisiera usar una característica nueva, podría sacarla de un repositorio en Github o de donde sea, y utilizarla, y eso sigue pareciendo factible. Tengo curiosidad de saber si alguien lo ha hecho, estoy un poco atrasado en la investigación.&lt;/p&gt;

  &lt;p&gt;Bueno, ¡Muchísimas gracias!&lt;/p&gt;

  &lt;p&gt;¡De nada!&lt;/p&gt;

&lt;/section&gt;

&lt;script&gt;
// Pestañas
var transcript = document.getElementById(&quot;transcript&quot;)
var traduccion = document.getElementById(&quot;traduccion&quot;)

document.getElementById(&quot;selectorTranscript&quot;)
	.addEventListener(&quot;change&quot;, cambiarPestañas)
document.getElementById(&quot;selectorTraduccion&quot;)
	.addEventListener(&quot;change&quot;, cambiarPestañas)

function cambiarPestañas() {
	transcript.classList.toggle(&quot;oculto&quot;)
	traduccion.classList.toggle(&quot;oculto&quot;)
}

// Transcript
var audio = document.querySelector(&quot;audio&quot;)
var parrafos = Array.from(document.querySelectorAll(&quot;#transcript &gt; p&quot;))

parrafos.forEach(palabrasASpan)
function palabrasASpan(parrafo) {
	var palabras = parrafo.innerText.split(&quot; &quot;)
	parrafo.innerHTML = &quot;&lt;span&gt;&quot; + palabras.join(&quot;&lt;/span&gt; &lt;span&gt;&quot;) + &quot;&lt;/span&gt;&quot;
}

var spansPalabras = flatten(parrafos.map(function(parrafo) {
	return Array.from(parrafo.getElementsByTagName(&quot;span&quot;))
}))
function flatten(aList) {
	return [].concat.apply([], aList)
}

/*
var tiemposPalabras = []
document.querySelector(&quot;body&quot;).onkeypress = e =&gt; {
	if (e.key == &quot; &quot;) {
		spansPalabras[tiemposPalabras.length].classList.add(&quot;read&quot;)
		tiemposPalabras.push(audio.currentTime)
		return false
	}
}
*/

var tiemposPalabras = [1.93, 2.15, 2.31, 2.59, 2.75, 3.36, 4.51, 4.65, 5.15, 5.67, 5.85, 6.05, 6.23, 6.47, 7.12, 7.25, 7.43, 7.62, 8.21, 8.41, 9.03, 9.56, 9.75, 9.92, 10.1, 11.07, 11.26, 11.44, 11.7, 12.05, 12.22, 13.82, 13.96, 14.13, 14.31, 14.52, 14.7, 15, 15.45, 15.78, 15.97, 16.15, 16.34, 16.48, 16.63, 16.76, 16.96, 17.16, 17.74, 17.92, 18.1, 18.37, 18.66, 18.83, 19.23, 19.47, 19.78, 20.02, 20.22, 20.56, 20.75, 20.93, 22.42, 22.56, 22.74, 22.9, 23.48, 23.66, 23.88, 24.47, 24.63, 24.81, 25.05, 25.3, 25.5, 25.7, 26.56, 27.87, 28, 28.13, 29.23, 29.96, 30.15, 30.33, 31.97, 33.81, 34.47, 34.92, 35.21, 35.38, 36.01, 36.21, 36.48, 36.77, 37.02, 37.21, 37.55, 37.76, 37.97, 38.17, 38.41, 40.03, 40.22, 40.45, 41.5, 42.26, 42.46, 42.65, 42.96, 43.17, 43.5, 44.78, 44.97, 45.23, 45.51, 45.68, 45.91, 46.37, 46.62, 47.33, 47.52, 47.7, 47.88, 48.13, 48.33, 48.51, 48.7, 48.97, 49.58, 49.75, 49.91, 50.06, 50.22, 50.37, 50.92, 51.07, 51.25, 51.5, 52.06, 52.23, 53.66, 53.82, 54.01, 54.58, 54.75, 54.94, 55.48, 55.66, 55.95, 56.48, 56.82, 56.98, 57.13, 57.87, 58.08, 58.27, 58.45, 58.65, 58.9, 59.25, 60.43, 60.76, 60.93, 61.1, 61.27, 61.62, 62.03, 62.62, 62.95, 63.15, 63.5, 63.7, 63.87, 64.06, 64.62, 64.86, 65.12, 65.35, 65.55, 65.8, 66.28, 67.25, 67.46, 67.62, 67.8, 67.96, 68.2, 68.54, 68.73, 68.91, 69.09, 69.29, 70.65, 70.81, 71.39, 71.57, 71.81, 72.02, 72.33, 73.33, 74.27, 74.45, 74.62, 74.8, 75.1, 75.42, 75.61, 76.36, 76.53, 76.73, 77.13, 78.17, 78.35, 78.69, 78.87, 79.18, 79.38, 80.25, 80.6, 80.78, 81.25, 81.58, 81.85, 82.81, 84.08, 84.56, 84.73, 84.9, 87.18, 87.5, 87.81, 88, 88.41, 90.15, 90.52, 90.69, 91.51, 91.77, 91.93, 92.47, 92.63, 93, 93.52, 93.7, 94.09, 95.45, 95.68, 96.01, 96.21, 96.43, 96.61, 96.8, 96.97, 97.63, 97.9, 98.12, 98.36, 98.6, 98.78, 98.96, 99.37, 99.98, 100.22, 100.4, 100.55, 100.87, 101.07, 101.25, 101.41, 101.65, 101.83, 101.99, 102.16, 102.32, 102.48, 103.15, 103.32, 103.48, 103.68, 103.86, 104.41, 104.66, 104.82, 104.98, 105.15, 105.31, 105.46, 105.76, 105.92, 106.1, 106.26, 106.44, 106.61, 106.78, 106.99, 107.16, 107.32, 107.48, 107.66, 108.47, 108.63, 108.81, 108.98, 109.28, 109.46, 109.78, 111.54, 111.81, 112.07, 112.28, 112.51, 112.86, 113.05, 113.21, 113.37, 113.54, 113.68, 113.84, 113.98, 114.15, 114.3, 115.22, 115.38, 115.55, 115.74, 115.91, 116.87, 117.06, 117.44, 117.72, 117.91, 118.1, 118.3, 118.55, 118.74, 118.92, 119.13, 119.33, 119.53, 119.92, 120.52, 120.7, 120.87, 121.18, 122.11, 122.28, 122.46, 122.65, 122.85, 123.05, 123.23, 123.75, 124, 124.75, 124.9, 125.2, 125.4, 125.97, 126.65, 127.11, 127.28, 127.52, 127.77, 128.84, 129.05, 129.68, 129.97, 130.21, 132.12, 132.31, 132.5, 132.87, 133.9, 134.17, 134.38, 134.63, 135.35, 135.51, 135.69, 135.88, 136.07, 136.3, 137.41, 137.78, 138, 138.22, 138.56, 138.75, 138.95, 139.13, 139.68, 139.85, 140.04, 140.2, 140.38, 140.72, 140.92, 141.13, 141.32, 141.7, 141.9, 142.08, 142.27, 143.67, 143.83, 144.02, 144.23, 144.43, 144.61, 144.77, 144.95, 145.12, 145.31, 145.6, 145.78, 145.96, 146.16, 146.53, 147.51, 148.7, 149.2, 149.38, 149.56, 149.74, 149.9, 150.09, 150.35, 151.48, 151.62, 151.8, 151.97, 152.17, 152.36, 152.73, 153.13, 153.72, 153.91, 154.12, 154.32, 154.88, 155.21, 155.48, 155.67, 155.86, 156.25, 156.57, 156.73, 156.91, 157.1, 157.46, 158.01, 158.2, 158.41, 158.7, 159.21, 160.5, 161.42, 161.72, 161.97, 162.35, 163.46, 163.61, 163.76, 163.94, 164.09, 164.24, 164.55, 165.59, 166.01, 166.23, 166.61, 166.81, 167.19, 167.36, 167.55, 167.75, 167.93, 168.16, 168.36, 169.61, 170.17, 170.36, 170.71, 170.96, 171.2, 171.73, 171.91, 172.13, 172.33, 172.71, 172.91, 173.3, 173.48, 173.67, 173.86, 174.02, 174.33, 174.5, 174.73, 174.96, 175.16, 175.34, 175.7, 175.91, 177.52, 179.35, 179.52, 179.82, 180.06, 180.46, 180.72, 180.92, 181.17, 183.36, 183.52, 183.68, 183.85, 184, 184.25, 184.5, 184.67, 184.93, 185.8, 185.97, 186.16, 186.47, 186.77, 186.93, 188.86, 189.06, 189.27, 190.02, 190.17, 191.16, 191.33, 191.67, 191.85, 192.8, 193.37, 193.54, 193.71, 193.87, 194.03, 194.21, 194.4, 194.55, 194.76, 195.15, 196.53, 196.71, 196.9, 197.09, 197.26, 197.41, 197.55, 197.91, 198.6, 198.76, 199.02, 199.18, 199.37, 199.56, 199.73, 199.93, 200.33, 200.66, 200.82, 201.01, 201.31, 201.48, 201.66, 201.87, 202.17, 202.32, 202.51, 202.65, 202.78, 202.93, 203.18, 205.67, 206.02, 206.23, 206.41, 206.59, 206.77, 207.01, 207.24, 207.41, 207.61, 207.79, 207.99, 208.26, 208.47, 208.81, 209.07, 209.37, 210.14, 210.71, 210.97, 212.97, 213.15, 214.7, 215.28, 215.48, 216.48, 216.68, 217.05, 218.65, 219.22, 219.4, 219.62, 220.01, 220.2, 220.38, 220.72, 221.52, 222.02, 222.48, 224.01, 225.15, 225.3, 225.78, 225.93, 226.17, 227.36, 227.56, 227.77, 228.18, 228.37, 228.57, 228.77, 229.17, 229.38, 229.7, 230, 230.87, 231.15, 232.43, 232.58, 232.76, 232.95, 233.11, 233.26, 233.56, 233.75, 233.93, 234.12, 234.33, 234.53, 234.71, 234.97, 235.2, 235.38, 235.58, 236.5, 237.1, 237.3, 237.6, 238.11, 239.66, 239.82, 240.02, 241.61, 241.77, 241.96, 242.16, 242.36, 242.62, 242.81, 243.01, 243.18, 243.37, 243.55, 243.71, 243.86, 244.02, 244.17, 244.33, 244.72, 244.98, 245.2, 245.43, 245.65, 245.86, 246.1, 246.33, 246.86, 247.6, 247.77, 247.98, 248.17, 248.35, 248.51, 248.67, 249.02, 249.41, 249.58, 249.73, 249.9, 250.06, 250.23, 250.6, 250.82, 251.01, 251.25, 251.53, 252.27, 252.46, 253.66, 253.85, 254, 254.15, 254.3, 254.46, 255.3, 255.45, 255.62, 255.81, 256.01, 256.38, 256.58, 256.96, 257.3, 258.62, 258.78, 258.95, 260.88, 261.1, 261.3, 261.46, 261.81, 262.72, 263.12, 263.34, 264.75, 265.61, 265.8, 266.17, 266.73, 266.96, 267.68, 267.92, 268.13, 268.45, 268.66, 268.96, 269.73, 269.96, 270.34, 270.55, 270.77, 271, 271.21, 271.42, 271.75, 271.98, 273.01, 273.18, 273.4, 274.67, 274.82, 275.04, 275.2, 275.38, 275.58, 276.06, 276.33, 276.62, 276.82, 277.02, 277.4, 277.6, 277.78, 279.12, 279.34, 279.56, 280.23, 280.45, 280.87, 281.61, 281.76, 281.97, 282.21, 282.41, 282.67, 282.91, 283.13, 283.58, 283.78, 283.97, 284.22, 284.77, 284.96, 285.16, 285.35, 285.58, 285.78, 285.98, 286.17, 286.36, 286.56, 286.75, 287.81, 288.3, 288.57, 288.8, 289.01, 289.6, 289.81, 290.12, 290.58, 290.73, 290.91, 291.11, 291.3, 291.47, 291.62, 292.53, 292.71, 292.92, 293.23, 293.75, 295.12, 295.31, 295.51, 295.85, 296.05, 296.58, 297.13, 297.31, 299.16, 299.3, 299.52, 299.7, 299.91, 300.1, 300.28, 300.46, 300.72, 301.57, 301.78, 302.16, 303.31, 303.48, 303.67, 303.87, 304.07, 305.26, 305.51, 305.93, 306.11, 306.9, 307.25, 307.43, 307.62, 307.79, 307.95, 308.14, 308.35, 309.12, 309.31, 309.5, 309.68, 310.39, 310.62, 310.81, 311.02, 311.23, 311.63, 313.08, 313.33, 313.58, 313.92, 314.1, 314.27, 314.45, 314.62, 314.83, 315.17, 315.36, 315.57, 316.96, 317.13, 317.3, 317.93, 318.11, 318.3, 318.45, 318.9, 319.08, 319.3, 319.51, 319.85, 320.1, 320.31, 320.53, 320.78, 322.01, 322.18, 322.36, 322.52, 322.71, 322.97, 323.15, 323.32, 323.57, 324.43, 324.6, 324.98, 325.16, 325.37, 325.58, 325.96, 326.2, 326.42, 326.63, 326.85, 327.39, 327.86, 328.12, 328.34, 328.51, 328.67, 328.95, 329.17, 330.45, 330.65, 330.9, 331.13, 333.75, 334.15, 334.46, 334.73, 335.06, 335.26, 336.18, 336.36, 336.71, 336.92, 337.13, 337.48, 337.68, 337.86, 338.07, 338.28, 338.93, 339.12, 339.31, 339.55, 339.83, 340.65, 340.81, 340.97, 341.15, 341.3, 341.46, 341.65, 341.81, 342.17, 342.72, 342.91, 343.07, 343.22, 343.4, 343.9, 344.11, 344.3, 344.46, 344.63, 345.16, 345.36, 345.55, 345.72, 345.88, 346.07, 346.3, 346.52, 346.71, 346.93, 347.12, 348.41, 348.58, 348.76, 348.95, 349.15, 349.33, 349.52, 349.72, 350.2, 350.38, 350.56, 350.72, 350.91, 351.1, 351.33, 351.91, 352.12, 352.36, 352.93, 353.14, 353.33, 353.51, 353.75, 353.95, 354.43, 355.27, 355.45, 355.64, 355.8, 355.98, 356.87, 357.06, 357.25, 357.45, 357.73, 357.93, 358.18, 358.4, 358.59, 358.79, 358.98, 359.58, 359.77, 359.96, 360.18, 360.37, 361.82, 362, 362.47, 362.68, 362.95, 363.11, 363.33, 363.63, 363.81, 364, 364.17, 364.35, 364.51, 364.64, 364.81, 364.98, 365.17, 365.36, 365.53, 365.71, 365.87, 366.01, 366.16, 366.31, 366.45, 366.63, 366.76, 366.91, 367.07, 367.23, 367.41, 367.58, 367.76, 367.92, 368.13, 368.6, 368.81, 369.04, 369.22, 369.42, 369.61, 369.78, 372.73, 372.9, 373.78, 373.95, 374.27, 374.46, 374.67, 375.17, 375.52, 375.78, 376, 376.19, 376.86, 377.91, 378.57, 378.97, 380.62, 380.78, 380.98, 381.19, 381.48, 383.28, 383.47, 383.64, 383.8, 384.88, 385.26, 385.57, 385.76, 385.95, 386.31, 386.51, 386.7, 388.46, 388.66, 388.9, 389.07, 389.38, 391.02, 391.55, 391.75, 391.95, 392.14, 392.32, 392.68, 393.3, 393.52, 393.87, 395.01, 395.3, 396.42, 396.6, 397.2, 397.41, 397.61, 398, 399.14, 399.72, 399.93, 400.08, 400.22, 400.4, 401.22, 401.41, 401.85, 402.12, 402.32, 402.52, 402.76, 402.98, 403.17, 403.38, 403.7, 404.27, 404.46, 404.68, 405.5, 407.4, 407.6, 407.81, 408.01, 408.56, 409.26, 409.55, 409.78, 410.03, 410.24, 410.46, 410.7, 411.15, 412.16, 412.35, 412.54, 412.72, 412.93, 413.52, 413.97, 414.17, 414.35, 414.6, 415.58, 416.51, 417, 417.17, 417.41, 418.15, 418.5, 419.71, 420.85, 421.13, 421.7, 421.88, 422.08, 422.32, 422.51, 422.68, 424.2, 424.36, 424.6, 424.8, 425.86, 426.27, 426.88, 427.42, 427.7, 427.95, 428.18, 428.62, 428.81, 429.03, 429.47, 429.88, 430.11, 430.31, 430.52, 430.76, 430.95, 431.16, 431.41, 432.31, 432.48, 432.67, 432.9, 433.12, 433.57, 433.73, 433.9, 434.05, 434.2, 434.57, 435.31, 435.81, 436.01, 436.38, 436.82, 437.01, 437.18, 437.71, 437.9, 438.35, 438.56, 438.73, 438.89, 439.48, 439.68, 439.88, 440.11, 440.47, 441.56, 441.72, 441.91, 442.06, 442.2, 442.37, 442.74, 442.92, 443.64, 443.95, 444.15, 444.32, 445.12, 445.31, 445.55, 445.91, 446.12, 446.36, 447.08, 447.3, 447.47, 447.65, 447.81, 447.95, 448.1, 448.27, 448.42, 449.22, 449.37, 449.65, 451.17, 451.35, 451.57, 451.76, 452.16, 452.46, 453.53, 453.68, 453.96, 454.15, 454.33, 454.55, 454.76, 454.97, 455.27, 455.47, 455.63, 455.86, 456.76, 456.95, 457.13, 457.32, 457.57, 457.96, 459.31, 459.5, 459.7, 460.52, 461.42, 461.65, 461.81, 461.98, 462.72, 462.88, 463.07, 463.28, 463.53, 463.75, 463.93, 464.11, 465.13, 465.31, 465.68, 466.07, 466.26, 466.58, 466.78, 467.12, 467.33, 467.53, 467.71, 467.92, 468.37, 468.56, 468.76, 469.35, 469.56, 469.78, 470.31, 470.47, 470.66, 470.9, 471.13, 471.34, 471.96, 472.16, 473.95, 474.52, 474.7, 474.9, 475.12, 475.51, 475.68, 475.87, 476.95, 478.43, 478.6, 478.79, 478.96, 479.16, 479.36, 479.55, 479.73, 479.93, 480.51, 480.7, 480.89, 481.13, 481.48, 483.38, 483.52, 483.71, 483.88, 484.09, 484.28, 484.75, 484.9, 485.07, 485.25, 485.47, 485.71, 485.88, 486.1, 486.32, 486.81, 486.97, 487.4, 488.26, 488.4, 488.6, 488.85, 489.06, 489.25, 489.45, 489.71, 490.16, 490.32, 491.11, 491.3, 491.52, 491.85, 492.1, 493.45, 494.26, 494.47, 494.72, 494.99, 496.65, 496.82, 496.99, 497.22, 497.43, 497.62, 497.79, 498.12, 498.32, 499.43, 499.57, 499.75, 499.93, 500.1, 500.48, 501.1, 503.1, 503.38, 503.58, 503.77, 503.96, 505.43, 505.66, 505.83, 506.02, 506.32, 506.56, 507, 507.21, 507.41, 508.47, 508.65, 508.95, 509.2, 510.08, 510.28, 510.45, 510.65, 510.95, 511.16, 513.18, 513.35, 513.53, 513.75, 513.95, 514.15, 514.35, 514.56, 514.81, 515.19, 516.37, 516.57, 516.82, 517.06, 517.25, 517.46, 517.78, 518, 518.18, 518.37, 518.75, 518.93, 519.13, 519.9, 520.52, 520.7, 520.88, 521.08, 521.28, 522.37, 522.61, 522.85, 523.06, 523.26, 523.8, 524.01, 526.37, 526.65, 527.42, 527.82, 528.02, 528.24, 528.66, 529.42, 530.15, 530.58, 530.81, 531, 531.17, 531.75, 532.1, 532.31, 534, 534.18, 534.42, 534.62, 534.81, 535, 535.18, 535.37, 535.61, 536.03, 536.23, 536.42, 536.6, 537.13, 539.91, 540.1, 540.27, 540.46, 540.75, 541.26, 541.48, 541.68, 541.88, 542.25, 542.53, 543.02, 543.45, 543.74, 543.96, 544.18, 545.13, 545.31, 545.5, 545.7, 545.9, 546.07, 546.91, 547.08, 547.27, 547.45, 547.65, 547.82, 548, 548.2, 548.41, 548.6, 548.81, 549, 549.22, 550.42, 550.57, 550.78, 550.99, 551.2, 551.4, 552.01, 552.18, 552.37, 552.78, 553.88, 554.03, 554.21, 554.38, 554.57, 554.77, 555.13, 555.57, 555.77, 555.98, 556.27, 556.56, 556.98, 557.2, 557.57, 558.28, 559.32, 559.66, 560.91, 561.08, 561.27, 561.5, 561.87, 562.88, 563.1, 563.28, 563.76, 563.96, 564.12, 564.3, 564.46, 564.63, 564.81, 564.98, 565.15, 565.31, 565.47, 565.66, 565.9, 566.7, 566.9, 567.09, 567.36, 567.57, 567.83, 568.3, 569.31, 569.6, 570.51, 570.9, 571.1, 571.35, 571.55, 571.75, 572.06, 572.91, 573.18, 573.38, 573.57, 573.77, 573.96, 574.17, 574.37, 574.57, 575.01, 575.94, 576.62, 576.79, 576.98, 578.6, 578.81, 579.01, 579.32, 579.52, 579.73, 579.92, 580.12, 580.51, 580.74, 580.98, 581.3, 582.76, 582.97, 583.18, 583.42, 583.67, 583.93, 584.12, 584.31, 584.5, 584.68, 584.86, 585.03, 585.22, 585.61, 585.8, 585.97, 586.17, 586.36, 586.53, 586.73, 586.92, 587.17, 587.36, 587.85, 588.02, 588.23, 588.4, 588.6, 588.8, 588.97, 589.17, 589.37, 590.67, 590.85, 591.04, 591.2, 591.38, 591.58, 591.8, 592.06, 592.52, 592.8, 593.01, 593.2, 593.57, 593.74, 593.91, 594.1, 594.28, 594.5, 594.68, 594.86, 595.16, 595.37, 596.81, 597.02, 597.22, 597.4, 597.58, 597.78, 597.98, 598.17, 598.35, 598.55, 598.75, 598.94, 599.15, 599.36, 599.55, 599.74, 599.92, 600.1, 600.36, 600.56, 600.76, 600.95, 601.13, 601.31, 601.49, 601.67, 602.05, 602.22, 602.42, 602.63, 602.91, 603.55, 603.75, 603.93, 604.12, 604.87, 605.06, 605.27, 605.66, 605.86, 606.3, 607.87, 608.07, 608.36, 610.97, 611.4, 611.78, 612.4, 612.88, 613.5, 613.68, 613.86, 614.03, 614.2, 614.37, 614.58, 614.85, 615.03, 615.21, 615.38, 615.55, 615.73, 615.96, 616.21, 617.71, 617.86, 618.23, 618.76, 619.15, 619.32, 619.49, 619.68, 621.08, 621.24, 621.43, 622.36, 622.65, 622.87, 623.05, 623.31, 623.48, 623.67, 624.16, 624.55, 624.72, 625.02, 626.31, 626.45, 626.62, 626.78, 626.95, 627.13, 627.32, 627.52, 627.71, 627.91, 628.28, 628.45, 628.62, 628.81, 628.98, 629.19, 629.4, 629.61, 629.78, 629.97, 630.17, 630.36, 630.55, 630.74, 630.91, 631.07, 631.25, 631.46, 632.42, 632.71, 632.97, 633.15, 633.36, 633.53, 633.78, 634.9, 635.11, 635.3, 635.47, 635.67, 635.85, 636.06, 636.95, 637.43, 637.61, 637.8, 637.98, 638.87, 639.05, 640.13, 640.62, 640.8, 640.96, 641.13, 641.31, 642.02, 642.2, 642.38, 643.41, 643.58, 643.91, 644.08, 644.3, 644.52, 645.94, 646.18, 646.37, 646.57, 646.95, 647.12, 647.31, 647.5, 647.92, 648.87, 649.12, 650.65, 650.82, 650.99, 651.21, 652.69, 652.88, 653.08, 653.3, 653.52, 653.74, 653.95, 654.12, 654.29, 654.46, 654.61, 654.8, 654.99, 655.2, 657.12, 657.45, 658.75, 658.87];

spansPalabras.forEach(function(span, i) {
	span.addEventListener(&quot;click&quot;, function() {
		audio.currentTime = tiemposPalabras[i]
		return false
	})
})
audio.ontimeupdate = function() {
	tiemposPalabras.forEach(function(tiempoPalabra, i) {
		if (tiempoPalabra &lt;= audio.currentTime) {
			spansPalabras[i].classList.add(&quot;read&quot;)
		} else {
			spansPalabras[i].classList.remove(&quot;read&quot;)
		}
	})
}
&lt;/script&gt;</content><category term="Smalltalks 2017" /><category term="SugarLoaf PLoP 2017" /><category term="Smalltalk" /><category term="Patterns" /><summary type="html">Esta es la segunda entrevista que realicé durante las Smalltalks 2017, en la ciudad de La Plata. Esta vez entrevisto a Brian Foote, sobre las charlas que dió en las Smalltalks y en el Mini SugarLoaf PLoP 2017.</summary></entry><entry><title type="html">Smalltalks 2017 - Entrevista con James Foster</title><link href="http://javiergelatti.github.io/smalltalks-2017-entrevista-con-james-foster/" rel="alternate" type="text/html" title="Smalltalks 2017 - Entrevista con James Foster" /><published>2017-11-14T13:30:04-03:00</published><updated>2017-11-14T13:30:04-03:00</updated><id>http://javiergelatti.github.io/smalltalks-2017-entrevista-con-james-foster</id><content type="html" xml:base="http://javiergelatti.github.io/smalltalks-2017-entrevista-con-james-foster/">&lt;p&gt;Hace unos días volví a Tucumán de las &lt;a href=&quot;http://fast.org.ar/&quot;&gt;Smalltalks 2017&lt;/a&gt;, que se hicieron en la ciudad de La Plata. Las charlas estuvieron muy interesantes, con disertantes de excelente nivel.&lt;/p&gt;

&lt;p&gt;En la conferencia participan muchas personas apasionadas por lo que hacen. Esto no es tan difícil de imaginar, considerando lo elegante y práctico que resulta programar en Smalltalk. No es casual, por ejemplo, que Smalltalk haya salido en segundo lugar entre los lenguajes de programación más queridos en las &lt;a href=&quot;https://insights.stackoverflow.com/survey/2017#most-loved-dreaded-and-wanted&quot;&gt;Stack Overflow Developer Survey 2017&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Durante la conferencia hice algunas entrevistas cortas, que quiero compartir con ustedes. Incluyo aquí la primera, con James Foster, en la que hablamos un poco sobre la &lt;em&gt;persistencia en los sistemas orientados a objetos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Había algo de viento durante la charla, así que si no se entiende algo pueden revisar la transcripción. Tienen también disponible una traducción al español, con algunos links. La entrevista también se puede &lt;a href=&quot;https://soundcloud.com/facundo-javier-gelatti/smalltalks-2017-interview-with-james-foster&quot;&gt;escuchar desde Soundcloud&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://photos.google.com/share/AF1QipOcSPviy6_nL9vlUBjqsK2xycd1XtLxLXrWwYog_a4IurSX1UiuJGnKTHxQuRAG-g/photo/AF1QipPWsK823VfZRynsX6mn1OZp_H3gw8CoVkrJ5TEZ?key=RjUyY2lEc0FtOF8tVGhWRVJjNHFiRU14R215SHZB&quot;&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/james_foster.jpg&quot; alt=&quot;James Foster (por Emilio Oca)&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;audio controls=&quot;controls&quot; preload=&quot;auto&quot; src=&quot;/media/smalltalks2017_james_foster.ogg&quot;&gt;
Parece que tu navegador no soporta el elemento audio :(&lt;br /&gt;
Podés probar &lt;a href=&quot;https://soundcloud.com/facundo-javier-gelatti/smalltalks-2017-interview-with-james-foster&quot;&gt;escuchando desde Soundcloud&lt;/a&gt;.
&lt;/audio&gt;

&lt;nav id=&quot;selector&quot;&gt;	
	&lt;input type=&quot;radio&quot; name=&quot;contenido&quot; value=&quot;transcript&quot; id=&quot;selectorTranscript&quot; checked=&quot;true&quot; /&gt;
	&lt;label for=&quot;selectorTranscript&quot;&gt;Transcripción textual&lt;/label&gt;
	
	&lt;input type=&quot;radio&quot; name=&quot;contenido&quot; value=&quot;traduccion&quot; id=&quot;selectorTraduccion&quot; /&gt;
	&lt;label for=&quot;selectorTraduccion&quot;&gt;Traducción con referencias&lt;/label&gt;
&lt;/nav&gt;

&lt;section id=&quot;transcript&quot;&gt;

  &lt;p&gt;We’re here with James Foster, from GemTalk Systems&lt;/p&gt;

  &lt;p&gt;Hello! Nice to be here&lt;/p&gt;

  &lt;p&gt;You work for GemTalk where you develop software to help in the persistence of data. So, what are the usual problems that we find when we try to implement persistence functionality on an object-oriented system?&lt;/p&gt;

  &lt;p&gt;On an object-oriented system, if the database is not object-oriented then we face the challenge of an impedance mismatch between the object and relational model, so that when you are saving your data you need to convert a complex object graph into a simple relational table, and then when you want to read your data you need to convert a simple relational data model into a complex object graph, and typically that is referred to as an impedance mismatch problem, and that probably represents the major challenge.
The other challenge with using a relational database when you are working on an object-oriented system, is that you need to deal with a second programming language, so that your queries are done using typically SQL, and for someone who’s used to programming in an object-oriented language having to then deal with a SQL environment is a different paradigm, a different model that needs to be learned and dealt with.&lt;/p&gt;

  &lt;p&gt;So in that case it’s better to have an object-oriented database&lt;/p&gt;

  &lt;p&gt;So with an object-oriented database, we can take the objects as they exist in your client application and then persist them in their complete object graph model, and also you can write queries using the Smalltalk object-oriented programming language, so that you are using the same programming language on your client and on your server.&lt;/p&gt;

  &lt;p&gt;So, the product that you develop is for Smalltalk systems. What makes Smalltalk different?&lt;/p&gt;

  &lt;p&gt;Smalltalk is a product that came out of the Palo Alto Research Center at Xerox, they developed it in the 1970s and 1980s and it represents the pure object model approach that other so called object-oriented languages are adopting or imitating in an incomplete fashion. So with Smalltalk we focus on message sends between objects and with the message sending model, we find a simplicity and an elegance that increases our productivity.&lt;/p&gt;

  &lt;p&gt;Okay, thank you for your time&lt;/p&gt;

  &lt;p&gt;Thank you very much!&lt;/p&gt;

&lt;/section&gt;
&lt;section id=&quot;traduccion&quot; class=&quot;oculto&quot;&gt;

  &lt;p&gt;Estamos con James Foster, de &lt;a href=&quot;https://gemtalksystems.com/&quot;&gt;GemTalk Systems&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;¡Hola! Encantado de estar aquí&lt;/p&gt;

  &lt;p&gt;En GemTalk desarrollan software para ayudar en la &lt;a href=&quot;https://es.wikipedia.org/wiki/Persistencia_(inform%C3%A1tica)&quot;&gt;persistencia de datos&lt;/a&gt;. ¿Cuáles son los problemas usuales con los que nos encontramos cuando intentamos implementar la funcionalidad de persistencia en un sistema orientado a objetos?&lt;/p&gt;

  &lt;p&gt;En un sistema orientado a objetos, si la base de datos no es orientada a objetos, entonces nos enfrentamos con el desafío de un “desajuste de impedancia” (&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;impedance mismatch&lt;/a&gt;) entre el modelo de objetos y el modelo relacional, de modo que cuando estás guardando los datos necesitas convertir un grafo de objetos complejo en una tabla relacional simple, y después cuando querés leer esos datos necesitas convertir un modelo simple de datos relacionales en un grafo de objetos complejo.
Típicamente esto se conoce como un problema de desajuste de impedancia (&lt;a href=&quot;https://en.wikipedia.org/wiki/Object-relational_impedance_mismatch&quot;&gt;impedance mismatch problem&lt;/a&gt;), y esto probablemente representa el desafío principal.
El otro desafío que existe cuando utilizas una base de datos relacional en un sistema orientado a objetos, es que necesitas usar un segundo lenguaje de programación, de modo que tus consultas usualmente se realizan utilizando &lt;a href=&quot;https://es.wikipedia.org/wiki/SQL&quot;&gt;SQL&lt;/a&gt;, y para alguien que está acostumbrado a programar en un lenguaje orientado a objetos tener entonces que lidiar con un entorno SQL representa un modelo y paradigma diferentes que tiene que entender y aprender.&lt;/p&gt;

  &lt;p&gt;En ese caso entonces es mejor tener una base de datos orientada a objetos&lt;/p&gt;

  &lt;p&gt;Con una base de datos orientada a objetos, podemos tomar los objetos tal como existen en tu aplicación cliente y persistirlos con su grafo de objetos completo, y también podés escribir las consultas usando un lenguaje de programación orientado a objetos (en este caso &lt;a href=&quot;https://es.wikipedia.org/wiki/Smalltalk&quot;&gt;Smalltalk&lt;/a&gt;), pudiendo utilizar entonces el mismo lenguaje de programación en tu cliente y tu servidor.&lt;/p&gt;

  &lt;p&gt;Entonces, el producto que desarrollan es para sistemas programados en Smalltalk. ¿Qué es lo que hace que Smalltalk sea diferente al resto de los lenguajes de programación?&lt;/p&gt;

  &lt;p&gt;Smalltalk es un producto que salió del &lt;a href=&quot;https://es.wikipedia.org/wiki/Xerox_PARC&quot;&gt;centro de investigación de palo alto (PARC) en Xerox&lt;/a&gt;. Fué desarrollado en las décadas del 70 y 80, y representa el enfoque puro del modelo de objetos, que otros tan llamados “lenguajes orientados a objetos” adoptan o imitan de forma incompleta.
Con Smalltalk nos enfocamos en el envío de mensajes entre objetos, y con este modelo encontramos una simplicidad y elegancia que incrementa nuestra productividad.&lt;/p&gt;

  &lt;p&gt;Bueno, gracias por tu tiempo!&lt;/p&gt;

  &lt;p&gt;Muchas gracias a vos!&lt;/p&gt;

&lt;/section&gt;

&lt;script&gt;
// Pestañas
var transcript = document.getElementById(&quot;transcript&quot;)
var traduccion = document.getElementById(&quot;traduccion&quot;)

document.getElementById(&quot;selectorTranscript&quot;)
	.addEventListener(&quot;change&quot;, cambiarPestañas)
document.getElementById(&quot;selectorTraduccion&quot;)
	.addEventListener(&quot;change&quot;, cambiarPestañas)

function cambiarPestañas() {
	transcript.classList.toggle(&quot;oculto&quot;)
	traduccion.classList.toggle(&quot;oculto&quot;)
}

// Transcript
var audio = document.querySelector(&quot;audio&quot;)
var parrafos = Array.from(document.querySelectorAll(&quot;#transcript &gt; p&quot;))

parrafos.forEach(palabrasASpan)
function palabrasASpan(parrafo) {
	var palabras = parrafo.innerText.split(&quot; &quot;)
	parrafo.innerHTML = &quot;&lt;span&gt;&quot; + palabras.join(&quot;&lt;/span&gt; &lt;span&gt;&quot;) + &quot;&lt;/span&gt;&quot;
}

var spansPalabras = flatten(parrafos.map(function(parrafo) {
	return Array.from(parrafo.getElementsByTagName(&quot;span&quot;))
}))
function flatten(aList) {
	return [].concat.apply([], aList)
}

var tiemposPalabras = [
0.1,0.682,1.156,1.6,2.249,2.742,3.247,4.276,4.925,5.198,5.331,5.492,6.373,6.87,7.182,7.709,8.279,8.619,9.216,9.916,10.57,11.19,11.562,12.279,12.442,12.811,13.495,14.206,14.958,15.311,15.489,15.653,16.07,16.997,17.211,17.376,17.695,17.875,18.046,18.244,18.457,18.779,19.184,20.249,20.578,20.888,21.549,22.679,22.948,23.332,24.669,25.712,26.158,26.86,28.03,28.312,28.796,29.969,30.812,31.2,31.443,31.684,32.193,33.086,33.874,35.081,35.943,37.37,37.859,38.782,39.096,39.649,40.566,40.879,41.274,41.599,42.073,42.24,42.505,43.004,43.834,44.111,44.325,44.654,45.148,45.768,46.485,46.955,47.727,48.058,48.47,48.866,49.948,50.92,51,51.262,51.774,52.153,52.466,53.036,53.354,53.86,54.097,54.285,54.517,54.916,55.368,55.571,55.791,57,57.372,57.98,58.374,58.685,58.889,59.439,60.467,61.348,61.946,62.162,62.478,62.957,63.326,63.545,63.913,64.414,65.101,66.019,66.372,66.538,66.762,66.941,67.8,68.193,69.608,70.133,70.445,71.119,71.611,72.101,72.308,72.738,73.352,74.171,74.423,74.761,75.072,75.371,75.773,76.299,77.402,77.96,78.489,80,80.642,80.892,81.182,81.431,82.061,82.493,83.815,84.671,84.917,85.586,86.799,87.458,87.908,88.172,88.546,89.867,90.772,91.585,91.809,92.399,92.89,93.446,93.684,93.943,95.06,95.376,95.61,96.754,97.253,97.627,98.311,99.142,99.658,100.17,100.777,101.529,101.832,102.438,102.837,103.74,103.957,104.169,104.922,105.17,105.474,105.879,106.069,106.481,106.991,107.239,107.695,108.615,108.86,109.039,109.386,109.61,109.925,110.2,110.58,111.024,111.212,112.364,113.015,113.271,113.538,114.444,115.097,115.476,115.874,117.038,117.434,117.825,118.763,119.013,119.615,119.956,120.289,120.723,121.825,122.55,123.512,124.261,124.879,125.312,126.162,127.162,127.694,128.152,129.209,129.604,130.626,131.082,131.944,132.563,133.507,134.5,135.2,135.706,137.063,137.616,138.466,138.688,138.913,139.158,139.443,140.072,140.286,140.72,141.458,143.018,143.425,143.786,144.21,144.476,144.656,144.876,145.831,146.175,146.441,146.859,147.136,147.451,147.782,148.077,148.405,148.574,148.969,150.001,150.433,151.082,152.383,153.696,154.321,155.104,155.285,155.566,155.731,155.969,156.248,157.013,158.179,158.45,158.663,159.535,159.767,160.783,161.166,161.344,161.883,162.197,162.363,163.356,163.741,164.914,165.424,166.115,166.981,168.426,169.694,170.281,170.838,172.433,172.91,173.275,174.255,174.552,175.367,176.28,177.432,179.196,179.504,180.252,180.551,180.806,181.511,182.614,182.916,183.148,184.033,184.637,185.302,185.826,186.347,187.12,187.494,188.424,188.908,189.338,189.544,189.92,190.763,192.08,192.526,194.205,194.488,195.237,195.479,195.679,196.195,196.843,197.383,197.614,198.782,200.04,200.36,200.568,200.722,201.047,201.486,201.786,201.955,202.119,202.986
]
spansPalabras.forEach(function(span, i) {
	span.addEventListener(&quot;click&quot;, function() {
		audio.currentTime = tiemposPalabras[i]
		return false
	})
})
audio.ontimeupdate = function() {
	tiemposPalabras.forEach(function(tiempoPalabra, i) {
		if (tiempoPalabra &lt;= audio.currentTime) {
			spansPalabras[i].classList.add(&quot;read&quot;)
		} else {
			spansPalabras[i].classList.remove(&quot;read&quot;)
		}
	})
}
&lt;/script&gt;</content><category term="Smalltalks 2017" /><category term="Smalltalk" /><summary type="html">Hace unos días volví a Tucumán de las Smalltalks 2017, que se hicieron en la ciudad de La Plata. Las charlas estuvieron muy interesantes, con disertantes de excelente nivel.</summary></entry><entry><title type="html">¿Cómo podemos generar números aleatorios?</title><link href="http://javiergelatti.github.io/como-podemos-generar-numeros-aleatorios/" rel="alternate" type="text/html" title="¿Cómo podemos generar números aleatorios?" /><published>2015-04-27T11:40:00-03:00</published><updated>2015-04-27T11:40:00-03:00</updated><id>http://javiergelatti.github.io/como-podemos-generar-numeros-aleatorios</id><content type="html" xml:base="http://javiergelatti.github.io/como-podemos-generar-numeros-aleatorios/">&lt;p&gt;Hay muchas razones por las que podemos necesitar números aleatorios. Por ejemplo, si queremos hacer &lt;em&gt;simulaciones&lt;/em&gt; realistas de sucesos naturales como el clima, si necesitamos &lt;em&gt;tomar muestras aleatorias&lt;/em&gt; de un conjunto grande (del que sería poco práctico examinar todos los casos), si tenemos que &lt;em&gt;tomar una decisión&lt;/em&gt; imparcial sobre algo, si estamos &lt;em&gt;programando un juego&lt;/em&gt; que necesite desde lanzar una moneda o un dado, hasta generar niveles en forma aleatoria o producir eventos tipo “20% de posibilidades de hacer un golpe crítico”, etc, etc.&lt;/p&gt;

&lt;p&gt;Incluso, los números aleatorios pueden usarse simplemente para &lt;em&gt;crear cosas bonitas&lt;/em&gt;. Por ejemplo, la imagen de este post fué generada utilizando números aleatorios (&lt;a href=&quot;#cdigo-de-la-imagen-del-post&quot;&gt;mas abajo&lt;/a&gt; está el código que se usó para eso).&lt;/p&gt;

&lt;h2 id=&quot;cómo-podemos-generar-números-aleatorios&quot;&gt;¿Cómo podemos generar números aleatorios?&lt;/h2&gt;

&lt;h3 id=&quot;podemos-usar-software&quot;&gt;¿Podemos usar Software?&lt;/h3&gt;
&lt;p&gt;¿Puede una computadora generar números realmente aleatorios usando un algoritmo?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/algoritmo_nros_aleatorios.png&quot; alt=&quot;Entradas-&amp;gt;Algoritmo X-&amp;gt;Secuencia de números aleatorios&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Después de todo, si tenemos un algoritmo que genere los números determinísticamente, ya estamos violando una de las &lt;a href=&quot;/que-es-un-numero-aleatorio/#los-nmeros-aleatorios&quot;&gt;afirmaciones sobre los números aleatorios&lt;/a&gt;, que nos dice que &lt;em&gt;los números son obtenidos &lt;strong&gt;al azar&lt;/strong&gt; de forma independiente&lt;/em&gt;. Siempre podríamos saber cuál va a ser el número siguiente de la secuencia si tenemos el algoritmo que la genera y lo ejecutamos con las mismas entradas, por lo que los números no habrían sido obtenidos realmente al azar. ¿Y si no podemos saber de ninguna forma cuáles fueron las entradas para volver a ejecutar el algoritmo? Entonces significa que las entradas habrán sido aleatorias, entonces ¿Cómo hicimos para obtenerlas? (estamos en la misma).&lt;/p&gt;

&lt;p&gt;En definitiva, este problema lo va a tener cualquier algoritmo. Por lo tanto (al parecer) no podemos hacer demasiado usando &lt;em&gt;Software&lt;/em&gt;. Entonces, si no podemos procesar los números, ¿Qué tal si los obtenemos de otra forma y los guardamos para usarlos después?&lt;/p&gt;

&lt;p&gt;Podríamos construir una tabla gigante con números generados usando eventos aleatorios, por ejemplo números obtenidos al azar (a mano) de reportes de censos o tirando un dado un montón (pero un &lt;em&gt;montón&lt;/em&gt;) de veces, y cargarla en la computadora. Los programas entonces irían extrayendo los números de ahí. Y si no se nos ocurre de dónde sacar los números para la tabla, bueno, hay algunos libros que tienen justamente eso:&lt;/p&gt;

&lt;figure&gt;
&lt;img src=&quot;http://javiergelatti.github.io/images/a_million_random_digits.jpg&quot; alt=&quot;A Million Random Numbers&quot; /&gt;
&lt;figcaption&gt;
Libro &quot;Un millón de dígitos aleatorios&quot; (Si saben inglés, &lt;a href=&quot;http://www.amazon.com/Million-Random-Digits-Normal-Deviates/dp/0833030477/#revDivider&quot;&gt;lean las reseñas en Amazon&lt;/a&gt;)
&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;El problema de esto es que quizás la tabla no sea lo suficientemente grande (esperemos que alcance con cargar todo el libro), además del tiempo que nos llevaría ingresarla en la computadora, la memoria que ocuparía, y en general la molestia de estar preparando y manteniendo la tabla…&lt;/p&gt;

&lt;p&gt;Entonces, ¿Qué otra forma puede haber para obtener los números (que no sea una tabla que haya que cargar)?. Bueno, podríamos pensar algo para generar los números usando &lt;em&gt;Hardware&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;intentando-generar-los-números-con-hardware&quot;&gt;Intentando generar los números con Hardware&lt;/h3&gt;
&lt;p&gt;Por ejemplo, podemos conectarle a la computadora algún dispositivo físico que sirva como fuente de eventos aleatorios, desde un sensor de ruido térmico o atmosférico, hasta un robot que lance un dado y lea el resultado. &lt;a href=&quot;http://en.wikipedia.org/wiki/Comparison_of_hardware_random_number_generators&quot;&gt;En Wikipedia podemos encontrar una lista comparando algunos de estos generadores&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Pero bueno, usar un dispositivo Hardware tiene sus inconvenientes, porque pueden ser caros, no generar los números con velocidad suficiente, o ser frágiles. Para colmo, los fallos son bastante difíciles de detectar (¿Cómo podríamos detectar, dadas las secuencias aleatorias que genera la máquina, si tiene alguna falla?).&lt;/p&gt;

&lt;p&gt;Además, si bien resolvemos el problema de obtener los números al azar, para que los números nos sean útiles tenemos que conocer su &lt;strong&gt;distribución&lt;/strong&gt;. Entonces ¿Cuál es la distribución de los eventos aleatorios que se producen? ¿Y se mantiene constante, o varía con el tiempo (por ejemplo, cambia a medida que se desgasta el dispositivo)?.&lt;/p&gt;

&lt;p&gt;Obviamente, todas estas cuestiones van a depender del dispositivo, pero son solucionables. Y después de todo, al final vamos a tener un generador posta de números aleatorios.&lt;/p&gt;

&lt;p&gt;Pero ¿Vale la pena? Bueno, si estamos generando claves criptográficas aleatorias, realmente no queremos que nadie pueda adivinarlas. En esos casos sí se justifica un generador que utilice Hardware. Pero si lo que queremos es simular un dado para un juego, ¿Necesitamos tanta seguridad? Aparte, ¿Vamos a estar comprando un generador de números para conectarle a la compu solamente porque queremos hacer un jueguito que use un dado?&lt;/p&gt;

&lt;h3 id=&quot;lo-que-realmente-necesitamos&quot;&gt;Lo que realmente necesitamos&lt;/h3&gt;
&lt;p&gt;Lo que nos gustaría tener para hacer simulaciones es un generador de números que &lt;em&gt;parecerían ser aleatorios&lt;/em&gt;, pero que no necesariamente lo son. A estos números los denominamos &lt;strong&gt;pseudoaleatorios&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Esto hace que las limitaciones que encontramos en la generación de los números usando &lt;em&gt;Software&lt;/em&gt; ya no tengan importancia. Generar los números usando un algoritmo nos da ventajas en simplicidad y velocidad de generación con respecto a las soluciones que usaban &lt;em&gt;Hardware&lt;/em&gt;. Aparte, como los números son generados en forma determinística, podemos regenerar una secuencia ya generada anteriormente (teniendo los valores de entrada que se usaron para generarla), lo que nos puede ser útil para realizar pruebas y depurar nuestros programas.&lt;/p&gt;

&lt;p&gt;Entonces, hagamos un &lt;em&gt;bosquejo&lt;/em&gt; de los &lt;strong&gt;Requerimientos&lt;/strong&gt; que necesitamos para nuestro generador de números “aleatorios” (pseudoaleatorios realmente):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;El generador va a generar los números respetando siempre una &lt;em&gt;distribución&lt;/em&gt; específica. Vamos a optar por la &lt;a href=&quot;/que-es-un-numero-aleatorio/#distribucion-uniforme&quot;&gt;distribución uniforme&lt;/a&gt; para la generación.&lt;/li&gt;
  &lt;li&gt;El &lt;em&gt;período&lt;/em&gt; del generador debe ser grande. Esto es, si el generador, habiendo ya generado $k$ números, empieza a repetir toda o parte de la secuencia, $k$ debe ser grande.&lt;/li&gt;
  &lt;li&gt;Se debe poder guardar el &lt;em&gt;estado&lt;/em&gt; del generador, para poder repetir los números generados si se desea (por ejemplo, para ejecutar una prueba del programa).&lt;/li&gt;
  &lt;li&gt;El generador debe ser &lt;em&gt;eficiente&lt;/em&gt; en cuanto al tiempo de generación. No nos interesa un generador que se demore un mes para darnos el primer número.&lt;/li&gt;
  &lt;li&gt;El generador debe ser &lt;em&gt;eficiente&lt;/em&gt; en cuanto al uso de la memoria. Si ya decidimos no cargar toda una tabla, más vale que el generador utilice menos memoria que eso.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Podemos ver que estos requerimientos no son precisos (por ejemplo, qué significa que $k$ “debe ser grande”, o qué es ser “eficiente en el tiempo de generación”), pero al menos nos dan una pauta general sobre qué es lo que necesitamos.&lt;/p&gt;

&lt;p&gt;Ahora que nos decidimos a usar Software para la generación, y teniendo una idea sobre lo que queremos, en el próximo post vamos a empezar a ver algunos algoritmos para generar números aleatorios.&lt;/p&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Donald E. Knuth (1997) The Art of Computer Programming, Volume 2: Seminumerical Algorithms (3ra edición).&lt;/li&gt;
  &lt;li&gt;James E. Gentle (2005) Random Number Generation and Monte Carlo Methods (2da edición).&lt;/li&gt;
  &lt;li&gt;Universidad Autónoma de Madrid (2008) Curso de Estadística, &lt;a href=&quot;http://www.uam.es/personal_pdi/ciencias/dyakubov/ESTAD_2008/Tema_10D_Ya.pdf&quot;&gt;Tema 10: Simulación de Variables Aleatorias&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Colaboradores de Wikipedia (2015) &lt;a href=&quot;http://en.wikipedia.org/wiki/Applications_of_randomness&quot;&gt;Applications of randomness&lt;/a&gt;, Wikipedia, La enciclopedia libre.&lt;/li&gt;
  &lt;li&gt;Colaboradores de Wikipedia (2015) &lt;a href=&quot;http://en.wikipedia.org/wiki/Hardware_random_number_generator&quot;&gt;Hardware Random Number Generator&lt;/a&gt;, Wikipedia, La enciclopedia libre.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;código-de-la-imagen-del-post&quot;&gt;Código de la imagen del post&lt;/h2&gt;
&lt;p&gt;Aquí está el código que escribí para generar la imagen del post. Cada vez que se ejecuta genera una imagen diferente. El color, tamaño y posición de los triángulos se obtienen de forma aleatoria.&lt;/p&gt;

&lt;p data-height=&quot;268&quot; data-theme-id=&quot;14150&quot; data-slug-hash=&quot;XJvPpW&quot; data-default-tab=&quot;result&quot; data-user=&quot;javiergelatti&quot; class=&quot;codepen&quot;&gt;
&lt;a href=&quot;http://codepen.io/javiergelatti/pen/XJvPpW/&quot;&gt;Ver el código&lt;/a&gt;.
&lt;/p&gt;

&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;</content><category term="Simulación" /><category term="Números Aleatorios" /><summary type="html">Hay muchas razones por las que podemos necesitar números aleatorios. Por ejemplo, si queremos hacer simulaciones realistas de sucesos naturales como el clima, si necesitamos tomar muestras aleatorias de un conjunto grande (del que sería poco práctico examinar todos los casos), si tenemos que tomar una decisión imparcial sobre algo, si estamos programando un juego que necesite desde lanzar una moneda o un dado, hasta generar niveles en forma aleatoria o producir eventos tipo “20% de posibilidades de hacer un golpe crítico”, etc, etc.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://javiergelatti.github.io{&quot;feature&quot;=&gt;&quot;triangulos-aleatorios.png&quot;}" /></entry><entry><title type="html">¿Qué es un número aleatorio?</title><link href="http://javiergelatti.github.io/que-es-un-numero-aleatorio/" rel="alternate" type="text/html" title="¿Qué es un número aleatorio?" /><published>2015-04-19T17:58:01-03:00</published><updated>2015-04-19T17:58:01-03:00</updated><id>http://javiergelatti.github.io/que-es-un-numero-aleatorio</id><content type="html" xml:base="http://javiergelatti.github.io/que-es-un-numero-aleatorio/">&lt;p&gt;Después de haber visto varios métodos de ordenamiento en clase de Algoritmos, mientras estaba ordenando un mazo de cartas para practicar, me surgió una duda. Así como hay algoritmos para ordenar cosas, ¿Qué pasa si lo que quiero ahora es mezclar el mazo de cartas?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/ordenar_mezclar.png&quot; alt=&quot;3 1 2 &amp;lt;-mezclar/ordenar-&amp;gt; 1 2 3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Debería ser más fácil que ordenarlo, ¿No? Al menos no tengo que seguir un orden específico, podría hacer lo que quiera, pero ¿Cómo?.&lt;/p&gt;

&lt;p&gt;Una forma que se nos puede ocurrir es asignar un número al azar a cada carta, y después ordenarlas según esos números. Por supuesto hay otras formas mas eficientes de mezclar un mazo de cartas, pero en todas entran en juego números elegidos al azar, o números aleatorios.&lt;/p&gt;

&lt;p&gt;Pero, &lt;strong&gt;¿Cómo hago para elegir número al azar? ¿Existe algún algoritmo que pueda generar números realmente aleatorios?&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Obviamente que si buscamos en Google “Generar números al azar en &amp;lt;tu lenguaje de programación favorito aquí&amp;gt;” seguramente encontraremos métodos del lenguaje tipo &lt;code class=&quot;highlighter-rouge&quot;&gt;Math.random()&lt;/code&gt; que hacen justamente eso, pero la gracia, igual que con los métodos de ordenamiento, es conocer y entender cómo funcionan esos algoritmos por dentro.&lt;/p&gt;

&lt;h2 id=&quot;los-números-aleatorios&quot;&gt;Los números aleatorios&lt;/h2&gt;
&lt;p&gt;Entonces, empecemos por lo básico, queremos saber cómo generar números aleatorios, pero ¿Qué es un número aleatorio? Por ejemplo, ¿Es &lt;span id=&quot;span_aleatorio&quot;&gt;7&lt;/span&gt; un número aleatorio?
&lt;script&gt; document.getElementById(&quot;span_aleatorio&quot;).innerHTML = Math.floor(Math.random()*9+1); &lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Bueno, no podemos decir nada al respecto, pero si le preguntaríamos a &lt;em&gt;&lt;a href=&quot;http://es.wikipedia.org/wiki/Donald_Knuth&quot; title=&quot;Donald Knuth&quot;&gt;Knuth&lt;/a&gt;&lt;/em&gt; nos diría que:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;En realidad nunca hablamos de si un número particular es aleatorio, si no de una &lt;strong&gt;secuencia de números aleatorios independientes&lt;/strong&gt;, con una &lt;strong&gt;distribución&lt;/strong&gt; particular.&lt;br /&gt;
Esto significa (mas o menos) que cada número fué obtenido al azar, sin tener ninguna relación con los otros números de la secuencia, y que cada número tiene una probabilidad específica de pertenecer a un rango dado de valores.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Para entenderlo mejor, podemos dividir esto en dos afirmaciones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Los números son obtenidos al azar en forma independiente.&lt;/li&gt;
  &lt;li&gt;Los números tienen una distribución particular, esto es, cada número tiene una probabilidad específica de pertenecer a un rango dado de valores.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La primera afirmación nos dice que, por ejemplo, si nos dan los primeros 1000 números de una secuencia aleatoria, como cada número es obtenido de forma independiente de los demás, nos sería imposible calcular o adivinar de forma precisa cuál va a ser el siguiente número de la secuencia (solamente podríamos acertar de suerte).&lt;/p&gt;

&lt;p&gt;La segunda nos dice que los números de la secuencia responden a una distribución particular. Por ejemplo, si la distribución es como la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/ejemplo_distribucion.png&quot; alt=&quot;Ejemplo de distribución&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Vemos que es más probable obtener números entre 1 y 4 que entre 9 y 10. De todos modos, los valores de la secuencia siguien siendo aleatorios, solo que la probabilidad de encontrar números entre 1 y 4 en la secuencia es mayor que la probabilidad de encontrar números entre 9 y 10.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;distribucion-uniforme&quot;&gt;&lt;/a&gt;
Sin embargo, usualmente, cuando nos referimos a números aleatorios estamos pensando en que tenemos la misma probabilidad de obtener cualquier número, como cuando lanzamos un dado (que tenemos la misma probabilidad de obtener cualquier número del 1 al 6). Entonces, la distribución podría ser como la siguiente:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/distribucion_uniforme_continua.png&quot; alt=&quot;Ejemplo de distribución uniforme contínua&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Este tipo de distribución se denomina &lt;strong&gt;distribución uniforme&lt;/strong&gt;, y se denota como $U(\text{min}, \text{max})$, donde $\text{min}$ y $\text{max}$ representan el valor máximo y mínimo que podemos obtener. En el ejemplo, la distribución sería $U(0, 10)$.&lt;/p&gt;

&lt;p&gt;En el caso de que los números sólo puedan tomar valores enteros entre 1 y 6 (como cuando lanzamos un dado, que no nos puede salir un 4,17), entonces tenemos una &lt;strong&gt;distribución uniforme discreta&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://javiergelatti.github.io/images/distribucion_uniforme_discreta.png&quot; alt=&quot;Ejemplo de distribución uniforme discreta&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ahora, que cualquiera de los 6 números tenga la misma probabilidad de ser el siguiente en la secuencia no quiere decir que no pueda existir una secuencia obtenida al azar en donde aparezca 100 veces seguidas el número 4, por ejemplo, por más que esto sea muy poco probable.&lt;/p&gt;

&lt;p&gt;Además, como los números son independientes, si en la secuencia va apareciendo 99 veces seguidas el número 4, la probabilidad de que salga una vez más a continuación sigue siendo 1/6.&lt;/p&gt;

&lt;p&gt;Bueno, ya tenemos entonces una mejor idea sobre qué son los &lt;em&gt;números aleatorios&lt;/em&gt;. En el siguiente post vamos a empezar a pensar de qué maneras podríamos intentar generarlos.&lt;/p&gt;

&lt;h2 id=&quot;referencias&quot;&gt;Referencias&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Donald E. Knuth (1997) The Art of Computer Programming, Volume 2: Seminumerical Algorithms (3ra edición).&lt;/li&gt;
&lt;/ol&gt;</content><category term="Simulación" /><category term="Números Aleatorios" /><summary type="html">Después de haber visto varios métodos de ordenamiento en clase de Algoritmos, mientras estaba ordenando un mazo de cartas para practicar, me surgió una duda. Así como hay algoritmos para ordenar cosas, ¿Qué pasa si lo que quiero ahora es mezclar el mazo de cartas?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://javiergelatti.github.io{&quot;feature&quot;=&gt;&quot;http://imgs.xkcd.com/comics/random_number.png&quot;, &quot;external&quot;=&gt;true, &quot;credit&quot;=&gt;&quot;xkcd&quot;, &quot;creditlink&quot;=&gt;&quot;http://xkcd.com/221/&quot;}" /></entry></feed>
